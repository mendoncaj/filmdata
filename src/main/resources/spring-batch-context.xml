<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<import resource="classpath:context-datasource.xml" />

	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- ItemReader that reads multiple files -->
	<bean id="itemReader" class="org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="delegate" ref="xmlItemReader"/>
		<property name="resources" value="classpath:/films/*.xml"/>
	</bean>

	<!-- ItemReader which reads data from XML file -->
	<bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">

		<property name="fragmentRootElementName" value="FilmDetail" />

		<property name="unmarshaller">
			<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
				<property name="classesToBeBound">
					<list>
						<value>samuel.films.entity.Film</value>
					</list>
				</property>
			</bean>
		</property>
	</bean>

	<!-- ItemWriter which writes data to database -->
	<bean id="filmItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
                <![CDATA[        
                    insert ignore into films(film_code, film_name, imdb) values (?, ?, ?)
                ]]>
			</value>
		</property>

		<property name="ItemPreparedStatementSetter">
			<bean class="samuel.films.FilmPreparedStatementSetter" />
		</property>
	</bean>
	
	<bean id=actorItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
                <![CDATA[        
                    insert ignore into actors(name) values (?)
                ]]>
			</value>
		</property>

		<property name="ItemPreparedStatementSetter">
			<bean class="samuel.films.ActorPreparedStatementSetter" />
		</property>
	</bean>

	<!-- Optional ItemProcessor to perform business logic/filtering on the input 
		records -->
	<!-- <bean id="itemProcessor" class="samuel.films.FilmProcessor" /> -->
	
	<bean id="compositeItemProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor">
		<property name="delegates">
			<list>
				<bean class="samuel.films.FilmProcessor" />
				<bean class="samuel.films.ActorProcessor" />
			</list>
		</property>
	</bean>

	<!-- Optional JobExecutionListener to perform business logic before and 
		after the job -->
	<bean id="jobListener" class="samuel.films.FilmJobListener" />

	<!-- Step will need a transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- Actual Job -->
	<batch:job id="examResultJob">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="itemReader" writer="databaseItemWriter"
					processor="compositeItemProcessor" commit-interval="20" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

</beans>        